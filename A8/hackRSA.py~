











# t = threshold, assume no primes larger than this
# n, e = public RSA key
def finitePrimeHack(t, n, e):
    


    return [p, q, d]

def blockSizeHack(block, n, e):

    pass

def testFinitePrimeHack(calculated, expected):
    isCorrect = True
    if calculated[0] != expected[0]:
        isCorrect = False
        print("\tP value Incorrect:", finitePrimeTest1[0])
    if calculated[1] != expected[1]:
        isCorrect = False
        print("\tQ value Incorrect:", finitePrimeTest1[1])
    if calculated[2] != expected[2]:
        print('\tD value Incorrect:', finitePrimeTest1[2])
        isCorrect = False
    if isCorrect:
        print("\tPassed!")

def main():
    
    print("Testing Finite Prime Hack")
    finitePrimeTest1 = finitePrimeHack(100, 493, 5)
    print("Test 1")
    testFinitePrimeHack(finitePrimeTest1, [17, 29, 269] 
            

    print("\nTesting Block Size Hack")
    blocks = [2361958428825, 564784031984, 693733403745, 693733403745, 2246930915779, 1969885380643]    
    n = 3328101456763
    e = 1827871
    blockSizeHackTest1 = blockSizeHack(blocks, n, e)
    if blockSizeHackTest1 == 'Hello':
        print('Test 1 passed')
    else: 
        print('Test 1 Failed:',blockSizeHackTest1, 'returned instead of Hello')

if "__name__" == __main__:
    main()
